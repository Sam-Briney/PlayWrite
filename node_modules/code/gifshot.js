var window, document, $, project, gifshot;

var fs = require("fs"),
    draw = require("code/draw.js");

exports.run = function(win, doc, JQ, proj, gshot){
    window = win;
    document = doc;
    $ = JQ;
    project = proj;
    gifshot = gshot;
}

function distance(a, b){
	return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
}

function frame_to_gif(index){
    var frame = project.frames[index];

    var Move = function(p_index, l){
        this.p_index = p_index;
        this.line = JSON.parse(JSON.stringify(l));

        if(l.type === "arrow" || l.type === "screen" || l.type === "dribble"){
            this.line.a.x = steps.players[p_index].a.x + 12.5;
            this.line.a.y = steps.players[p_index].a.y + 12.5;
        }
    }

    var Pass = function(move_index, from_i, to){
        this.m_index = move_index;
        this.from = from_i;
        this.to = to;
    }

	var lines = [],
		arr = [],
		passes = [],
        steps = {
            players:[],
            moves: [],
            passes: [],
            pass_moves: []
        };

	for(i=0; i<frame.line_arr.length; i++){
		if(/^ball$|^o$|^x$|^[ball|o|x]+[1-5]$/.test(frame.line_arr[i].type) === true){
			arr.push($.extend({}, frame.line_arr[i]));
            steps.players.push($.extend({}, frame.line_arr[i]));
		}
		else if(frame.line_arr[i].type !== "pass"){
			lines.push(frame.line_arr[i]);
		}
		else{
			passes.push(frame.line_arr[i]);
            steps.passes.push(frame.line_arr[i]);
		}
	}

	var move_players = function move(){
        steps.moves.push([]);

		for(i=0; i<arr.length; i++){
			arr[i].close = [];

			for(ii=0; ii<lines.length; ii++){
				var d, b;

				if(lines[ii].type === "arrow" || lines[ii].type === "screen" || lines[ii].type === "dribble"){
					d = distance({
						x: arr[i].a.x + 12.5,
						y: arr[i].a.y + 12.5
					}, lines[ii].a);

					b = lines[ii].b;
				}
				else if(lines[ii].type === "dribble~"){
					d = distance({
						x: arr[i].a.x + 12.5,
						y: arr[i].a.y + 12.5
					}, lines[ii].points[0]);

					b = lines[ii].points[lines[ii].points.length - 1];
				}
				else{
					d = distance({
						x: arr[i].a.x + 12.5,
						y: arr[i].a.y + 12.5
					}, lines[ii].curve[0]);

					b = lines[ii].curve[lines[ii].curve.length - 1];
				}

				if(d <= 40){
					arr[i].close.push({
						d: d,
						index: ii,
						point: {
							x: b.x - 12.5,
							y: b.y - 12.5
						}
					});
				}
			}

			arr[i].close.sort(function(a, b){
				return a.d-b.d;
			});

		}

		for(i=0; i<arr.length; i++){

			for(ii=0; ii<arr[i].close.length; ii++){
				arr[i].close[ii].disputed = [];

				for(iii=0; iii<arr.length; iii++){
					for(iiii=0; iiii<arr[iii].close.length; iiii++){
						if(arr[i].close[ii].index === arr[iii].close[iiii].index && i !== iii){
							arr[i].close[ii].disputed.push(iii);
						}
					}
				}

			}
		}

		for(i=0; i<arr.length; i++){
			var point = {
				x: arr[i].a.x,
				y: arr[i].a.y
			};

			if(arr[i].close.length > 0){
				//not disputed
				if(arr[i].close[0].disputed.length === 0){
					point = {
						x: arr[i].close[0].point.x,
						y: arr[i].close[0].point.y
					}

					//log the line as used
					lines[arr[i].close[0].index].used = true;

                    //add a Move
                    steps.moves[steps.moves.length-1].push(new Move(i, lines[arr[i].close[0].index]));

				}
				else if(arr[i].close.length === 1){
					if(lines[arr[i].close[0].index].used !== true){
						var disputed = [];

						//eliminate disputes with other options
						for(ii=0; ii<arr[i].close[0].disputed.length; ii++){
							if(arr[arr[i].close[0].disputed[ii]].close.length === 1){
								disputed.push(arr[i].close[0].disputed[ii]);
							}
						}

						//trump due to multiple options on other players
						if(disputed.length === 0){
							point.x = arr[i].close[0].point.x,
							point.y = arr[i].close[0].point.y

							//log the line as used
							lines[arr[i].close[0].index].used = true;

                            //add move
                            steps.moves[steps.moves.length-1].push(new Move(i, lines[arr[i].close[0].index]));
						}
						else{
							//no trump because other players have only one option as well
							//use the closest player
							var closest = 1000;
							for(ii=0; ii<disputed.length; ii++){
								if(arr[disputed[ii]].close[0].d < closest){
									closest = arr[disputed[ii]].close[0].d;
								}
							}

							if(closest > arr[i].close[0].d){
								point.x = arr[i].close[0].point.x,
								point.y = arr[i].close[0].point.y

								//log the line as used
								lines[arr[i].close[0].index].used = true;

                                //add move
                                steps.moves[steps.moves.length-1].push(new Move(i, lines[arr[i].close[0].index]));
							}
						}
					}
				}
				else{
					//if this line has multiple options and disputes
					//eliminate used lines
					for(ii=0; ii<arr[i].close.length; ii++){
						if(lines[arr[i].close[ii].index].used === true){
							arr[i].close[ii].del = true;
						}
					}

					arr[i].close = arr[i].close.filter(function(value){
						if(value.del === true){
							return false;
						}
						else{
							return true;
						}
					});

					//if only one option or an undisputed first option move the loop back and continue
					if(arr[i].close.length === 1 || arr[i].close[0].disputed.length === 0){
						i--;
						continue;
					}
					else{
						//if multiple options and at least 1 dispute, check for non-disputed lines
						var set = false;
						for(ii=0; ii<arr[i].close.length; ii++){
							if(arr[i].close[ii].disputed.length === 0){
								point.x = arr[i].close[ii].point.x,
								point.y = arr[i].close[ii].point.y
								set = true;

								//log the line as used
								lines[arr[i].close[0].index].used = true;

                                //add move
                                steps.moves[steps.moves.length-1].push(new Move(i, lines[arr[i].close[0].index]));
								break;
							}
						}

						//if all lines are disputed take the closest line or nothing
						if(!set){
							arr[i].close = [arr[i].close[0]];
							i--;
							continue;
						}
					}
				}
			}

			arr[i].a = {
				x: point.x,
				y: point.y
			}
		}

		var len = lines.length;
		lines = lines.filter(function(value){
			if(value.used === true){
				return false;
			}
			else{
				return true;
			}
		});

		if(lines.length < len){
			return move();
		}
	}

	move_players();
    if(passes.length > 0){
        //get index of ball
        var ball_index = -1;
        for (var i = 0; i < steps.players.length; i++) {
            if(steps.players[i].type === "ball"){
                ball_index = i;
                break;
            }
        }


        if(ball_index > -1){
            for (var i = 0; i < steps.moves.length; i++) {
                //find first pass not in use
                var next_pass;
                for (var ii = 0; ii < steps.passes.length; ii++) {
                    if (steps.passes.used !== true) {
                        next_pass = ii;
                        break;
                    }
                }

                var d = distance({
                    x: steps.players[ball_index].a.x + 12.5,
                    y: steps.players[ball_index].a.y + 12.5
                }, steps.passes[next_pass].a);

                if(d < 40){
                    //associate pass with ball
                    var closest = 1000;
                    c_player = -1;

                    //this shouldn't be a pointer
                    var positions = JSON.parse(JSON.stringify({p: steps.players})).p;

                    //calculate positions of players
                    //problem in this loop
                    for (var ii = 0; ii <= i; ii++) {
                        for (var iii = 0; iii < steps.moves[ii].length; iii++) {

                            var line = steps.moves[ii][iii].line;

                            var b;

            				if(line.type === "arrow" || line.type === "screen" || line.type === "dribble"){
            					b = line.b;
            				}
            				else if(line.type === "dribble~"){
            					b = line.points[line.points.length - 1];
            				}
            				else{
            				    b = line.curve[line.curve.length - 1];
            				}
                            positions[steps.moves[ii][iii].p_index].a.x = b.x;
                            positions[steps.moves[ii][iii].p_index].a.y = b.y;
                        }
                    }

                    for (var ii = 0; ii < positions.length; ii++) {
                        if(ii === ball_index){
                            continue;
                        }

                        var db = distance(positions[ii].a, steps.players[ball_index].a);
                        if(db < closest){
                            closest = db;
                            c_player = ii;
                        }
                    }

                    steps.pass_moves.push(new Pass(i, ball_index, c_player));
                    ball_index = c_player;
                }

            }
        }
    }

	// if(passes.length > 0){
	// 	var pass = passes[passes.length - 1];
    //
	// 	var closest = 1500;
	// 	var index = -1;
    //
	// 	var ball_index = -1;
    //
	// 	for(i=0; i<arr.length; i++){
	// 		if(/^ball$|^o$|^[ball|o]+[1-5]$/.test(arr[i].type) === true){
	// 			var d = distance({
	// 				x: arr[i].a.x + 12.5,
	// 				y: arr[i].a.y + 12.5
	// 			}, pass.b);
    //
	// 			if(d < closest){
	// 				closest = d;
	// 				index = i;
	// 			}
	// 		}
    //
	// 		if(/^ball$|^[ball]+[1-5]$/.test(arr[i].type) === true){
	// 			ball_index = i;
	// 		}
	// 	}
    //
	// 	if(index > -1 && ball_index > -1){
	// 		arr[ball_index].type = arr[ball_index].type.replace("ball", "o");
	// 		arr[index].type = arr[index].type.replace("o", "ball");
	// 	}
	// }

	for(i=0; i<arr.length; i++){
		//delete arr[i].close;
	}
	for(i=0; i<lines.length; i++){
		//delete lines[i].used;
	}

    //remove empty moves
    if(steps.moves[steps.moves.length-1].length < 1){
        steps.moves.pop();
    }

    //return steps
	return steps;

}

exports.create = function(range){
    var pdf_canvas = document.getElementById("pdf_canvas");
    var pdf_ctx = pdf_canvas.getContext("2d");

    var ball_img = document.getElementById("ballIMG");

    var images = [];

    for (var i = range[0]; i <= range[1]; i++) {
        var steps = frame_to_gif(i);

        var shell_frame = JSON.parse(JSON.stringify(project.frames[i]));

        var startpos = JSON.parse(JSON.stringify({p: steps.players}));

        //controls number of frames
        var fraction = 0.05;

        for (var ii = 0; ii < steps.moves.length; ii++) {

            for (var mult = 0; mult <= 1; mult += fraction) {
                var line_arr = startpos.p;

                var ball_pos = {
                    x: -100,
                    y: -100
                }

                for (var iii = 0; iii < steps.moves[ii].length; iii++) {
                    var move = steps.moves[ii][iii];
                    if(move.line.type === "arrow" || move.line.type === "screen" || move.line.type === "dribble"){

                        var xLen = move.line.b.x - move.line.a.x;
                        var yLen = move.line.b.y - move.line.a.y;

                        var dx = xLen * mult;
                        var dy = yLen * mult;

                        line_arr[move.p_index].a.x = steps.players[move.p_index].a.x + dx;
                        line_arr[move.p_index].a.y = steps.players[move.p_index].a.y + dy;

    				}
    				else{
                        //for curves~
                        move.line.points2 = [];
                        if(move.line.type !== "dribble~"){
                            move.line.points2 = move.line.curve;
                        }
                        else {
                            for (var iv = 0; iv < move.line.points.length; iv++) {
                                if (iv % 3 === 0) {
                                    move.line.points2.push(move.line.points[iv]);
                                }
                            }
                        }

                        var dmap = [0];

                        for (var iv = 1; iv < move.line.points2.length; iv++) {
                            dmap.push(dmap[iv-1] + distance({
                                x: move.line.points2[iv].x,
                                y: move.line.points2[iv].y
                            }, {
                                x: move.line.points2[iv-1].x,
                                y: move.line.points2[iv-1].y
                            }));
                        }

                        var d_to_travel = dmap[dmap.length - 1] * mult;

                        for (var iv = 0; iv < dmap.length; iv++) {
                            if (dmap[iv] >= d_to_travel) {
                                line_arr[move.p_index].a.x = move.line.points2[iv].x - 12.5;
                                line_arr[move.p_index].a.y = move.line.points2[iv].y - 12.5;

                                break;
                            }
                        }
    				}

                }

                //won't work unless a move is made
                for (var iii = 0; iii < steps.pass_moves.length; iii++) {
                    if(steps.pass_moves[iii].m_index === ii){
                        var move_index = {
                            from: -1,
                            to: -1
                        };

                        for (var iv = steps.moves[ii].length - 1; iv >= 0; iv--) {
                            if(steps.moves[ii][iv].p_index === steps.pass_moves[iii].from){
                                move_index.from = iv;
                                break;
                            }
                        }
                        for (var iv = steps.moves[ii].length - 1; iv >= 0; iv--) {
                            if(steps.moves[ii][iv].p_index === steps.pass_moves[iii].to){
                                move_index.to = iv;
                                break;
                            }
                        }

                        //from
                        if(move_index.from > -1){
                            var move = steps.moves[ii][move_index.from];

                            if(move.line.type === "arrow" || move.line.type === "screen" || move.line.type === "dribble"){
                                var a = {
                                    x: move.line.a.x,
                                    y: move.line.a.y
                                }
            				}
                            else {
                                if(move.line.type !== "dribble~"){
                                    move.line.points = move.line.curve;
                                }

                                var a = {
                                    x: move.line.points[0].x,
                                    y: move.line.points[0].y
                                }
                            }
                        }
                        else {
                            var a = {
                                x: steps.players[steps.pass_moves[iii].from].a.x,
                                y: steps.players[steps.pass_moves[iii].from].a.y
                            }
                        }
                        //to
                        if(move_index.to > -1){
                            move = steps.moves[ii][move_index.to];

                            if(move.line.type === "arrow" || move.line.type === "screen" || move.line.type === "dribble"){
                                var b = {
                                    x: move.line.b.x,
                                    y: move.line.b.y
                                }
            				}
                            else {
                                if(move.line.type !== "dribble~"){
                                    move.line.points = move.line.curve;
                                }

                                var b = {
                                    x: move.line.points[move.line.points.length-1].x,
                                    y: move.line.points[move.line.points.length-1].y
                                }
                            }
                        }
                        else {
                            var b = {
                                x: steps.players[steps.pass_moves[iii].to].a.x,
                                y: steps.players[steps.pass_moves[iii].to].a.y
                            }
                        }

                        var xLen = b.x - a.x;
                        var yLen = b.y - a.y;

                        var dx = xLen * mult;
                        var dy = yLen * mult;

                        ball_pos.x = a.x + dx - 6.25;
                        ball_pos.y = a.y + dy - 6.25;
                    }
                }
                shell_frame.line_arr = line_arr;

                draw.log(pdf_ctx, document, shell_frame, false, true);

                //draw ball at ball_pos obj coordinates size: 12.5 by 12.5
                pdf_ctx.drawImage(ball_img, ball_pos.x, ball_pos.y, 12.5, 12.5);
                images.push(pdf_canvas.toDataURL("image/jpeg"));
            }
        }

        if(steps.moves.length < 1){
            if (steps.pass_moves.length > 0) {
                var line_arr = startpos.p;

                for (var ii = 0; ii < steps.pass_moves.length; ii++) {
                    var ball_pos = {
                        x: -100,
                        y: -100
                    }

                    for (var mult = 0; mult <= 1; mult += fraction) {

                        var xLen = steps.players[steps.pass_moves[ii].to].a.x - steps.players[steps.pass_moves[ii].from].a.x;
                        var yLen = steps.players[steps.pass_moves[ii].to].a.y - steps.players[steps.pass_moves[ii].from].a.y;

                        var dx = xLen * mult;
                        var dy = yLen * mult;

                        ball_pos.x = steps.players[steps.pass_moves[ii].from].a.x + dx + 6.25;
                        ball_pos.y = steps.players[steps.pass_moves[ii].from].a.y + dy + 6.25;

                        shell_frame.line_arr = line_arr;

                        draw.log(pdf_ctx, document, shell_frame, false, true);

                        //draw ball at ball_pos obj coordinates size: 12.5 by 12.5
                        pdf_ctx.drawImage(ball_img, ball_pos.x, ball_pos.y, 12.5, 12.5);
                        images.push(pdf_canvas.toDataURL("image/jpeg"));
                    }
                }

            }
        }

        for (var ii = 0; ii < images.length; ii++) {
            //console.log(images[ii]);
        }

        // for (var ii = 0; ii < steps.length; ii++) {
        //     //TODO render more finely
        //
        //     shell_frame.line_arr = steps[ii];
        //     draw.log(pdf_ctx, document, shell_frame, false, true);
        //
        //     images.push(pdf_canvas.toDataURL("image/jpeg"));
        // }



    }

    gifshot.createGIF({
        images: images,
        gifWidth: 500,
        gifHeight: 420,
        interval: 0.1
    },function(obj) {
        if(!obj.error) {
            var image = obj.image;

            console.log(image);

            image = image.substring(22);

            var buffer = new Buffer(image, 'base64');

            function save_gif(){
                var files = [$("#gif_file").val()];

        		if(files[0].substring(files[0].length - 4, files[0].length).toLowerCase() !== ".gif"){
        			files[0] += ".gif";
        		}

        		fs.writeFileSync(files[0], buffer);
        		$("#gif_dialog").dialog("close");

        		$("#gif_file").unbind("change");
        		$("#gif_file").remove();
        		$("#gif_dialog").append('<input class="hidden" id="gif_file" type="file" accept=".gif" nwsaveas>');
        		$("#gif_dialog").on("change", "#gif_dialog", save_gif);
            }

            $("#gif_file").click();
            $("#gif_file").change(save_gif);
        }
    });
}
