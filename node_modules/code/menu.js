exports.set = function(window, win, gui, document, $, project, clipboard, ui, misc, draw, frame, BSON){

		var menubar = new gui.Menu({ type: 'menubar' });

		var file = new gui.Menu();

			file.append(new gui.MenuItem({
				label: 'New',
				click: function() {
					$("#new").click();
				}
			}));

			file.append(new gui.MenuItem({
				label: 'Open',
				click: function() {
					$("#open").click();
				}
			}));
			file.append(new gui.MenuItem({
				label: 'Save',
				click: function() {
					$("#save").click();
				}
			}));
			file.append(new gui.MenuItem({
				label: 'Save As',
				click: function() {
					$("#save_as_input").click();
				}
			}));
			file.append(new gui.MenuItem({ type: 'separator' }));
			file.append(new gui.MenuItem({
				label: 'Settings',
				click: function() {
					ui.settings();
				}
			}));
			file.append(new gui.MenuItem({ type: 'separator' }));
			file.append(new gui.MenuItem({
				label: 'PDF',
				click: function() {
					$("#generate_pdf").click();
				}
			}));
			file.append(new gui.MenuItem({
				label: 'Print',
				click: function() {
					ui.print(project, BSON);
				}
			}));
			file.append(new gui.MenuItem({
				label: "Create GIF",
				click: function(){
					ui.gif(project);
				}
			}));
			file.append(new gui.MenuItem({ type: 'separator' }));
			file.append(new gui.MenuItem({
				label: 'Exit',
				click: function() {
					window.close();
				}
			}));

		menubar.append(new gui.MenuItem({ label: 'File', submenu: file}));

		var edit = new gui.Menu();

			edit.append(new gui.MenuItem({
				label: 'Undo',
				click: function() {
					$("#undo").click();
				}
			}));
			edit.append(new gui.MenuItem({ type: 'separator' }));
			edit.append(new gui.MenuItem({
				label: 'Cut',
				click: function() {
					clipboard.cut(project);
				}
			}));
			edit.append(new gui.MenuItem({
				label: 'Copy',
				click: function() {
					clipboard.copy(project);
				}
			}));
			edit.append(new gui.MenuItem({
				label: 'Paste',
				click: function() {
					$("#paste").click();
				}
			}));
			edit.append(new gui.MenuItem({ type: 'separator' }));
			edit.append(new gui.MenuItem({
				label: 'Delete',
				click: function() {
					var ev = $.Event("keydown");
					ev.which = 46;
					$(window).trigger(ev);
				}
			}));
			edit.append(new gui.MenuItem({
				label: 'Rename Frame',
				click: function() {
					$("#frame_rename").dialog("open");
				}
			}));
			edit.append(new gui.MenuItem({
				label: 'New Frame',
				click: function() {
					$("#add_frame").click();
				}
			}));
			edit.append(new gui.MenuItem({
				label: 'Continue Play',
				click: function() {
					$("#continue_frame").click();
				}
			}));
			edit.append(new gui.MenuItem({
				label: 'Insert Text Box',
				click: function() {
					$("#new_text_box").click();
				}
			}));
			var court_settingsM = new gui.Menu();

				court_settingsM.append(new gui.MenuItem({
					label: 'Full Court',
					click: function() {
						$("#full_court").mouseenter().click();
					}
				}));
				court_settingsM.append(new gui.MenuItem({
					label: 'Half Court',
					click: function() {
						$("#half_court").mouseenter().click();
					}
				}));
				court_settingsM.append(new gui.MenuItem({
					label: 'No Boundaries',
					click: function() {
						$("#no_bound").mouseenter().click();
					}
				}));
				court_settingsM.append(new gui.MenuItem({
					label: 'Boundaries',
					click: function() {
						$("#bound").mouseenter().click();
					}
				}));

			edit.append(new gui.MenuItem({ label: 'Court Settings', submenu: court_settingsM}));

			var line_setting = new gui.Menu();

				line_setting.append(new gui.MenuItem({
					label: 'Move',
					click: function() {
						$("#arrow").mouseenter();
						$("#arrow").click();
					}
				}));
				line_setting.append(new gui.MenuItem({
					label: 'Arrow',
					click: function() {
						$("#dribble").mouseenter();
						$("#dribble").click();
					}
				}));
				line_setting.append(new gui.MenuItem({
					label: 'Screen',
					click: function() {
						$("#screen").mouseenter();
						$("#screen").click();
					}
				}));
				line_setting.append(new gui.MenuItem({
					label: 'Pass',
					click: function() {
						$("#pass").mouseenter();
						$("#pass").click();
					}
				}));
				line_setting.append(new gui.MenuItem({
					label: 'Ball',
					click: function() {
						$("#ball").mouseenter();
						$("#ball").click();
					}
				}));
				line_setting.append(new gui.MenuItem({
					label: 'O',
					click: function() {
						$("#o").mouseenter();
						$("#o").click();
					}
				}));
				line_setting.append(new gui.MenuItem({
					label: 'X',
					click: function() {
						$("#x").mouseenter();
						$("#x").click();
					}
				}));


			edit.append(new gui.MenuItem({ label: 'Line Setting', submenu: line_setting}));

			edit.append(new gui.MenuItem({type: "separator"}));

			edit.append(new gui.MenuItem({
				label: "Players",
				click: function(){
					ui.edit_players();
				}
			}));
			edit.append(new gui.MenuItem({
				label: 'Search',
				click: function() {
					ui.search(project);
				}
			}));
			edit.append(new gui.MenuItem({
				label: 'Change Player Icons',
				click: function() {
					ui.player_icons(project, misc, draw, frame);
				}
			}));


		menubar.append(new gui.MenuItem({ label: 'Edit', submenu: edit}));

		var view = new gui.Menu();

			view.append(new gui.MenuItem({
				label: "Presentation",
				click: function(){
					require("code/presentation.js").open(project, gui);
				}
			}));

		menubar.append(new gui.MenuItem({label: "View", submenu: view}));

		var windowM = new gui.Menu();

			windowM.append(new gui.MenuItem({
				label: 'Minimize',
				click: function() {
					win.minimize();
				}
			}));
			windowM.append(new gui.MenuItem({
				label: 'Maximize',
				click: function() {
					win.maximize();
				}
			}));
			windowM.append(new gui.MenuItem({ type: 'separator' }));
			windowM.append(new gui.MenuItem({
				label: 'Restore',
				click: function() {
					win.restore();
				}
			}));

		menubar.append(new gui.MenuItem({ label: 'Window', submenu: windowM}));

		var helpM = new gui.Menu();

		helpM.append(new gui.MenuItem({
			label: 'Help Contents',
			click: function() {
				gui.Window.open("resources/help.html", {
					toolbar: false,
					show: false,
					title: "Help",
					width: 640,
					height: 400,
					min_width: 640,
					min_height: 400,
					icon: "resources/icons/32.png"
				});

			}
		}));
		helpM.append(new gui.MenuItem({ type: 'separator' }));
		helpM.append(new gui.MenuItem({
			label: 'About PlayWrite',
			click: function() {
				gui.Window.open("resources/about.html", {
					toolbar: false,
					show: false,
					frame: true,
					width: 300,
					height: 300,
					min_width: 300,
					min_height: 300,
					max_width: 300,
					max_height: 300,
					icon: "resources/icons/32.png",
					resizable: false
				});
			}
		}));

		menubar.append(new gui.MenuItem({ label: 'Help', submenu: helpM}));

		win.menu = menubar;

		//see players module for context menu
}
