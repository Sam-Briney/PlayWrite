var $, document, window, project, gui, frame, misc;

var ui = require("code/ui.js"),
	construct = require("code/construct.js"),
	fs = require("fs"),
	BSON = require("buffalo"),
	draw = require("code/draw.js");

exports.run = function(JQ, doc, win, proj, GUI, fr, msc){
	$ = JQ;
	document = doc;
	window = win;
	project = proj;
	gui = GUI;
	frame = fr;
	misc = msc;
	
	$("#new_player").click(function(){
		ui.new_player();
	});
	
	$("#edit_players").on("click", "li>span", function(){
		ui.edit_player(project.players[parseInt($(this).parent().attr("data-index"))]);
	});
	
	$("#import_players").click(function(){
		$("#edit_players input[type='file']").click();
	});
	
	$("#edit_players input[type='file']").change(function(){
		var file = fs.readFileSync(this.value);
		
		var imported = BSON.parse(file);
		
		var duplicates = [],
			originals = [];
		
		for(ii=0; ii<imported.players.length; ii++){
			var dup = exports.duplicate(imported.players[ii]);
			
			if(dup.id === true || dup.name === true || dup.number === true){
				var _I = [dup.nameI, dup.numberI, dup.idI];
			
				_I = _I.filter(function(elem, pos) {
					return _I.indexOf(elem) == pos;
				});
				
				_I = _I.filter(function(v){
					return v !== false;
				});
				
				duplicates.push([dup, ii, _I]);
			}
			else{
				originals.push(imported.players[ii]);
			}
		}
		
		if(originals.length > 0){
			misc.saved = false;
			global.actions.push(new construct.action({
				type: "edit_players",
				players: project.players.slice()
			}));
			
			project.players = project.players.concat(originals);
			$("#edit_players").dialog("close").dialog("open");
		}
		
		if(duplicates.length > 0){
			ui.duplicate_players(duplicates, imported.players);
		}
		
		$(this).val("");
	});
	
	$("#delete_players").click(function(){
		var to_delete = [];
		
		var frames = [];
		for(i=0; i<project.frames.length; i++){
			frames.push({
				line_arr: []
			});
			for(ii=0; ii<project.frames[i].line_arr.length; ii++){
				frames[i].line_arr.push({
					player: project.frames[i].line_arr[ii].player
				});
			}
		}
		
		$("#edit_players ol li input:checked").each(function(){
			var index = parseInt($(this).parent().attr("data-index"));
			
			for(i=0; i<project.frames.length; i++){
				for(ii=0; ii<project.frames[i].line_arr.length; ii++){
					if(project.frames[i].line_arr[ii].player === index){
						project.frames[i].line_arr[ii].player = -1;
					}
				}
			}
			
			to_delete.push(index);
		});
		
		for(i=0; i<project.frames.length; i++){
			for(ii=0; ii<project.frames[i].line_arr.length; ii++){
				if(project.frames[i].line_arr[ii].player > -1){
					project.frames[i].line_arr[ii].player = project.players[project.frames[i].line_arr[ii].player].id;
				}
			}
		}
		
		to_delete = to_delete.sort(function(a,b){
			return b-a;
		});
		
		if(to_delete.length > 0){
			misc.saved = false;
			
			global.actions.push(new construct.action({
				type: "delete_players",
				players: project.players.slice(),
				frames: frames
			}));
		}
		
		for(i=0; i<to_delete.length; i++){
			project.players.splice(to_delete[i], 1);
		}
		
		for(i=0; i<project.frames.length; i++){
			for(ii=0; ii<project.frames[i].line_arr.length; ii++){
				if(project.frames[i].line_arr[ii].player !== -1){
					for(iii=0; iii<project.players.length; iii++){
						if(project.players[iii].id === project.frames[i].line_arr[ii].player){
							project.frames[i].line_arr[ii].player = iii;
						}
					}
				}
			}
		}
		
		var ctx = document.getElementById("canvas").getContext("2d");
		draw.log(ctx, document, project.frames[frame.index], false, false);
		
		$("#edit_players").dialog("close").dialog("open");
	});
	
	exports.menu = function(e, that){
		var menu = new gui.Menu();
		for(i=0; i<project.players.length; i++){
			menu.append(new gui.MenuItem({
				label: project.players[i].name.f + " " + project.players[i].name.l,
				icon: i, //use icon property to store index
				click: function(){
					var line_index = parseInt($(that).attr("data-index"));
					project.frames[frame.index].line_arr[line_index].player = parseInt(this.icon);
					
					var ctx = document.getElementById("canvas").getContext("2d");
					draw.log(ctx, document, project.frames[frame.index], false, false);
				}
			}));
		}
		if(e.pageX !== undefined && e.pageY !== undefined){
			menu.popup(e.pageX, e.pageY);
		}
		
	}
	
}

exports.search_local = function(index){
	var results = [];
	
	for(i=0; i<project.frames.length; i++){
		for(ii=0; ii<project.frames[i].line_arr.length; ii++){
			if(project.frames[i].line_arr[ii].player === index){
				results.push(i);
				break;
			}
		}
	}
	
	return results;
}

exports.form = function(sel){
	var arr = $(sel).serializeArray();
	
	var name = {}
	var positions = [];
	
	for(i=0; i<arr.length; i++){
		switch(arr[i].name){
			case "fName":
				name.f = arr[i].value;
			break;
			case "lName":
				name.l = arr[i].value;
			break;
			case "position":
				positions.push(arr[i].value);
			break;
			case "number":
				var number = arr[i].value;
			break;
		}
	}
	
	return new construct.Player(name, number, positions);
	
}

exports.duplicate = function(player){
	var duplicate = {
		name: false,
		nameI: 0,
		number: false,
		numberI: 0,
		id: false,
		idI: 0
	}
	for(i=0; i<project.players.length; i++){
		if(project.players[i].name.f === player.name.f && project.players[i].name.l === player.name.l){
			duplicate.name = true;
			duplicate.nameI = i;
		}
		if(project.players[i].number === player.number){
			duplicate.number = true;
			duplicate.numberI = i;
		}
		if(project.players[i].id === player.id){
			duplicate.id = true;
			duplicate.idI = i;
		}
	}
	
	return duplicate;
}

exports.save = function(player){
	var saved = false;
	
	global.actions.push(new construct.action({
		type: "edit_players",
		players: project.players.slice()
	}));
	
	for(i=0; i<project.players.length; i++){
		if(project.players[i].id === player.id){
			$.extend(project.players[i], player);
			saved = true;
		}
	}
	if(saved === false){
		project.players.push(player);
	}
	
	misc.saved = false;
}

exports.save_over = function(old, NEW){
	global.actions.push(new construct.action({
		type: "edit_players",
		players: project.players.slice()
	}));
	
	for(i=0; i<project.players.length; i++){
		if(project.players[i].id === old.id){
			project.players[i] = NEW;
			break;
		}
	}
	$("#edit_players").dialog("close").dialog("open");
	misc.saved = false;
}

exports.list = function(){
	return project.players;
}

