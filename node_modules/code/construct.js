var calc = require("code/calc.js");

var window, $, document, project, temp_line;
exports.run = function(win, doc, JQ, proj){
	window = win;
	document = doc;
	$ = JQ;
	project = proj;
}

var Line_data = function (obj){
	this.type = obj.type;
	
	this.player = -1;
	
	this.a = {
		x:obj.a.x,
		y:obj.a.y
	};
	
	var handle_offset = 10;
	
	if(obj.type === "arrow" || obj.type === "screen" || obj.type === "pass" || obj.type === "dribble"){
		this.b = {
			x:obj.b.x,
			y:obj.b.y
		};
		this.head = {
			pa:{
				x:obj.head.pa.x,
				y:obj.head.pa.y
			},
			pb:{
				x:obj.head.pb.x,
				y:obj.head.pb.y
			}
		};
		this.handle = {
			x: (obj.a.x + obj.b.x)/2 - handle_offset,
			y: (obj.a.y + obj.b.y)/2 - handle_offset
		}
	}
	if(obj.type === "dribble"){
		var points = calc.waypoints({x: obj.a.x, y: obj.a.y}, {x: obj.b.x, y: obj.b.y}, 3);
	
		points = calc.bezier(points);
		
		this.points = [];
		for(i=0; i<points.length; i++){
			this.points[i] = {
				x: points[i].x,
				y: points[i].y
			};
		}
	}
	if(obj.type === "dribble~"){
		this.points = [];
		for(i=1; i<obj.curve.length-1; i++){
			var points = calc.waypoints({x: obj.curve[i-1].x, y: obj.curve[i-1].y}, {x: obj.curve[i].x, y: obj.curve[i].y}, 3, true);
		
			points = calc.bezier(points);
			
			points.push({
				x: obj.curve[i].x,
				y: obj.curve[i].y
			});
			if(i>1){
				points.shift();
			}
			
			for(ii=0; ii<points.length; ii++){
				this.points.push({
					x: points[ii].x,
					y: points[ii].y
				});
			}
			
		}
		
		this.b = {
			x:obj.curve[obj.curve.length-1].x,
			y:obj.curve[obj.curve.length-1].y
		};
		this.head = {
			pa:{
				x:obj.head.pa.x,
				y:obj.head.pa.y
			},
			pb:{
				x:obj.head.pb.x,
				y:obj.head.pb.y
			}
		};
		
		var that = this;
		function roundto3(n){
			if(n > 0){
				n = Math.floor(n/3.0) * 3;
			}
			else{
				n = 0;
			}
			
			if(n >= that.points.length){
				n = 0;
			}
			
			return n;
		}
		
		this.handle = {
			x: that.points[roundto3(that.points.length/2)].x - handle_offset,
			y: that.points[roundto3(that.points.length/2)].y - handle_offset
		}
		
	}
	if(obj.type === "arrow~" || obj.type === "screen~"){
		this.head = {
			pa:{
				x:obj.head.pa.x,
				y:obj.head.pa.y
			},
			pb:{
				x:obj.head.pb.x,
				y:obj.head.pb.y
			}
		};
		this.curve = [];
		for(i=0; i<obj.curve.length; i++){
			this.curve[i] = {
				x: obj.curve[i].x,
				y:obj.curve[i].y
			};
		}
		
		this.handle = {
			x: obj.curve[Math.round(obj.curve.length/2)].x - handle_offset,
			y: obj.curve[Math.round(obj.curve.length/2)].y - handle_offset
		}
	}
	
};

exports.Line_data = Line_data;

var Player = function(name, number, positions){
	this.name = {
		//first and last names
		f: name.f,
		l: name.l
	}
	this.number = number;
	
	this.positions = [];
	for(i=0; i<positions.length; i++){
		this.positions.push(positions[i]);
	}
	
	this.id = calc.guid();
}

exports.Player = Player;

var text_box = function(){
	this.text = "";
	this.position = {
		x: 10,
		y: 10
	};
	this.size = {
		width: 175,
		height: 64
	}
}

exports.text_box = text_box;

var action = function(obj){
	this.type = obj.type;
	
	var title = "Undo ";
	
	switch(obj.type){
		case "a_done":
			title += "begin line";
		break;
		case "drawing":
			this.frame_index = obj.frame_index;
			
			var type = project.frames[obj.frame_index].line_arr[obj.arr_index].type;
			
			title += ("drawing " + type);
			
			if(type === "screen" || type === "arrow" || type === "pass" || type === "dribble"){
				for(i=global.actions.length-1; i>=0; i--){
					if(global.actions[i].type === "a_done"){
						global.actions.splice(i, 1);
						break;
					}
				}
			}
		break;
		case "delete_drawing":
			this.frame_index = obj.frame_index;
		
			this.deleted_drawings = {};
			var temp_dd = {
				a: obj.deleted_drawings
			}
			
			$.extend(this.deleted_drawings, temp_dd);
			
			title += "delete drawing(s)";
		break;
		case "move_drawing/handle":
			this.frame_index = obj.frame_index;
			this.index = obj.index;
			
			this.old = {
				x: obj.old.x,
				y: obj.old.y
			}
			
			title += "move drawing";
		break;
		case "new_text_box":
			this.frame_index = obj.frame_index;
			title += "insert text box";
		break;
		case "move_text_box":
			this.frame_index = obj.frame_index;
			this.index = obj.index;
			
			this.old = {
				x: obj.old.x,
				y: obj.old.y
			}
			
			title += "move text box";
		break;
		case "resize_text_box":
			this.frame_index = obj.frame_index;
			this.index = obj.index;
			
			this.old = {
				width: obj.old.width,
				height: obj.old.height
			}
			
			title += "resize text box";
		break;
		case "delete_text_box":
			this.frame_index = obj.frame_index;
			this.index = obj.index;
			
			this.text_box = {};
			
			$.extend(this.text_box, obj.text_box);
			
			title += "delete text box";
		break;
		case "court_setting":
			this.frame_index = obj.frame_index;
			this.VAR = obj.VAR;
			this.to = obj.to;
			title += "change court settings";
		break;
		case "delete_frame":
			this.deleted_frames = {};
			var temp_df = {
				a:obj.deleted_frames
			}
			
			$.extend(this.deleted_frames, temp_df);
			
			title += "delete frame(s)";
		break;
		case "add_frame":
			this.index = obj.index;
			
			title += "add frame"
		break;
		case "frame_sort":
			this.map = {};
			var temp_m = {
				a: obj.map
			}
			
			$.extend(this.map, temp_m);
			
			title += "sort frame(s)";
		break;
		case "frame_rename":
			this.names = {};
			
			var temp_n = {
				old_names: obj.old_names,
				new_name: obj.new_name
			}
			
			$.extend(this.names, temp_n);
			
			title += "rename frame(s)";
		break;
		case "change_player_icons":
			this.frame_index = obj.frame_index;
			this.old = obj.old;
			
			title += "change player icons";
		break;
		case "edit_line":
			this.frame_index = obj.frame_index;
			
			this.line_index = obj.line_index;
			this.changed_point = obj.changed_point;
			this.point = {
				x: obj.point.x,
				y: obj.point.y
			}
			
			title += "edit line";
		break;
		case "edit_players":
			this.players = obj.players;
			title += "Edit Player(s)";
		break;
		case "delete_players":
			this.players = obj.players;
			this.frames = obj.frames;
			
			title += "Delete Player(s)";
		break;
	}
	
	this.title = title;
	
	$("#undo").attr("title", title);
}

exports.action = action;