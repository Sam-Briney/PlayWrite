var $, window, document;
var ui = require("code/ui.js");
var draw = require("code/draw.js");
var construct = require("code/construct.js");

exports.run = function(JQ, win, doc, project, frame, clipboard){
	$ = JQ;
	window = win;
	document = doc;
	
	$(window).keydown(function(e){
		if(e.which === 90){
			if(e.ctrlKey){
				e.preventDefault();
				$("#undo").click();
			}
		}
		if(ui.none_open() && $(".text_box[data-tb_focus='true']").length === 0){
			switch(e.which){
				case 46:
					if($(".drawing_select").length < 1 && $(".handle_select").length < 1){
						$("#delete_frame").click();
					}
					else{
					
						$(".drawing_select").each(function(i){
							var index = parseInt($(this).attr("data-index"), 10);
							project.frames[frame.index].line_arr[index].del = true;
						});
						$(".handle_select").each(function(i){
							var index = parseInt($(this).prev(".handle").attr("data-index"), 10);
							project.frames[frame.index].line_arr[index].del = true;
						});
						
						var deleted_drawings = project.frames[frame.index].line_arr.filter(function(obj){
							return obj.del === true;
						});
						
						var count = 0;
						for(i=0; i<project.frames[frame.index].line_arr.length; i++){
							if(project.frames[frame.index].line_arr[i].del === true){
								deleted_drawings[count].index = i;
								count++;
							}
						}
						
						project.frames[frame.index].line_arr = project.frames[frame.index].line_arr.filter(function(obj){
							return obj.del !== true;
						});
						
						for(i=0; i<deleted_drawings.length; i++){
							delete deleted_drawings[i].del;
						}
						
						var pdf_ctx = document.getElementById("pdf_canvas").getContext("2d");
						var ctx = document.getElementById("canvas").getContext("2d");
						
						global.actions.push(new construct.action({
							type: "delete_drawing",
							frame_index: frame.index,
							deleted_drawings: deleted_drawings
						}));
						
						draw.current_frame(frame.index, pdf_ctx, project.frames[frame.index], document);
						draw.log(ctx, document, project.frames[frame.index]);
						
					}
				break;
				case 79:
					if(e.ctrlKey){
						$("#open").click();
					}
					else{
						$("#o").mouseenter();
						$("#o").click();
					}
				break;
				case 83:
					if(e.ctrlKey){
						$("#save").click();
					}
					else{
						$("#screen").mouseenter();
						$("#screen").click();
					}
				break;
				case 80:
					if(e.ctrlKey){
						$("#generate_pdf").click();
					}
					else{
						$("#pass").mouseenter();
						$("#pass").click();
					}
				break;
				case 65:
					$("#arrow").mouseenter();
					$("#arrow").click();
				break;
				case 66:
					$("#ball").mouseenter();
					$("#ball").click();
				break;
				case 68:
					$("#dribble").mouseenter();
					$("#dribble").click();
				break;
				case 88:
					$("#x").mouseenter();
					$("#x").click();
				break;
				case 82:
					if(e.ctrlKey){
						$("#frame_rename").dialog("open");
					}
				break;
				case 40:
					e.preventDefault();
					if((frame.index + 1) < project.frames.length){
						$("#frame_" + (frame.index + 1)).mousedown().click();
					}
				break;
				case 38:
					e.preventDefault();
					if(frame.index > 0){
						$("#frame_" + (frame.index - 1)).mousedown().click();
					}
				break;
				case 32:
					e.preventDefault();
					//space
				break;
				case 67:
					if(e.ctrlKey){
						clipboard.copy(project);
					}
				break;
				case 88:
					if(e.ctrlKey){
						clipboard.cut(project);
					}
				break;
				case 86:
					if(e.ctrlKey){
						$("#paste").click();
					}
				break;
				case 70:
					if(e.ctrlKey){
						ui.search(project);
					}
				break;
			}
		}
	});
};

