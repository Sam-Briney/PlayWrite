var fs = require("fs"),
	button_graphics = require("code/button_graphics.js"),
	settings = require("code/settings.js"),
	querystring = require('querystring'),
	https = require("https"),
	child_process = require("child_process"),
	players = require("code/players.js"),
	path = require("path"),
	BSON = require("buffalo"),
	search = require("code/search.js"),
	child_process = require("child_process"),
	draw = require("code/draw.js"),
	gif = require("code/gifshot.js"),
	$,
	document,
	window,
	win;

exports.run = function(JQ, doc, wind, guiWin){
	$ = JQ;
	document = doc;
	window = wind;
	win = guiWin;

	$("#frame_rename").dialog({
		autoOpen: false,
		height: 200,
		width:300,
		resizable: false,
		buttons:[
			{
				text: "Close",
				click: function(){
					$(this).dialog("close");
				}
			}
		],
		open: function(){
			$(this).keydown(function(e){
				if(e.which === 13){
					$(this).dialog("close");
				}
			});

		}
	});


	button_graphics.pdf();
	button_graphics.print();
	$("#per_page_1").click();
};

function log(value){
	fs.appendFile("console.txt", String(value + "\n"));
}

exports.prompt = function(str, title, cb){
	//see players module
	$("#prompt_dialog").attr("class", "dialog");

	$("#prompt_dialog").empty().append(str);

	$("#prompt_dialog").dialog({
		autoOpen:false,
		height: 250,
		width: 400,
		title: title,
		resizable:false,
		buttons:[
			{
				text: "Ok",
				click: function(){
					$(this).dialog("close");
					cb(true);
				}
			},
			{
				text: "Cancel",
				click:function(){
					$(this).dialog("close");
					cb(false);
				}
			}
		]
	});

	$("#prompt_dialog").dialog("open");
}

var none_open = function(exclude){
	var isOpen;
	if(exclude === undefined){
		isOpen = $(".dialog").is(":visible");
	}
	else{
		isOpen = $(".dialog:not(" + exclude + ")").is(":visible");
	}

	return !isOpen;
};
exports.none_open = none_open;

var loading = function(){
	$("body").append('<div id="loading_circle">\
		<svg width="198px" height="198px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid" class="uil-default"><rect x="0" y="0" width="100" height="100" fill="none" class="bk"/><rect x="46.5" y="40" width="7" height="20" rx="5" ry="5" fill="#1b4cad" transform="rotate(0 50 50) translate(0 -30)">  <animate attributeName="opacity" from="1" to="0" dur="1s" begin="0s" repeatCount="indefinite"/></rect><rect x="46.5" y="40" width="7" height="20" rx="5" ry="5" fill="#1b4cad" transform="rotate(30 50 50) translate(0 -30)">  <animate attributeName="opacity" from="1" to="0" dur="1s" begin="0.08333333333333333s" repeatCount="indefinite"/></rect><rect x="46.5" y="40" width="7" height="20" rx="5" ry="5" fill="#1b4cad" transform="rotate(60 50 50) translate(0 -30)">  <animate attributeName="opacity" from="1" to="0" dur="1s" begin="0.16666666666666666s" repeatCount="indefinite"/></rect><rect x="46.5" y="40" width="7" height="20" rx="5" ry="5" fill="#1b4cad" transform="rotate(90 50 50) translate(0 -30)">  <animate attributeName="opacity" from="1" to="0" dur="1s" begin="0.25s" repeatCount="indefinite"/></rect><rect x="46.5" y="40" width="7" height="20" rx="5" ry="5" fill="#1b4cad" transform="rotate(120 50 50) translate(0 -30)">  <animate attributeName="opacity" from="1" to="0" dur="1s" begin="0.3333333333333333s" repeatCount="indefinite"/></rect><rect x="46.5" y="40" width="7" height="20" rx="5" ry="5" fill="#1b4cad" transform="rotate(150 50 50) translate(0 -30)">  <animate attributeName="opacity" from="1" to="0" dur="1s" begin="0.4166666666666667s" repeatCount="indefinite"/></rect><rect x="46.5" y="40" width="7" height="20" rx="5" ry="5" fill="#1b4cad" transform="rotate(180 50 50) translate(0 -30)">  <animate attributeName="opacity" from="1" to="0" dur="1s" begin="0.5s" repeatCount="indefinite"/></rect><rect x="46.5" y="40" width="7" height="20" rx="5" ry="5" fill="#1b4cad" transform="rotate(210 50 50) translate(0 -30)">  <animate attributeName="opacity" from="1" to="0" dur="1s" begin="0.5833333333333334s" repeatCount="indefinite"/></rect><rect x="46.5" y="40" width="7" height="20" rx="5" ry="5" fill="#1b4cad" transform="rotate(240 50 50) translate(0 -30)">  <animate attributeName="opacity" from="1" to="0" dur="1s" begin="0.6666666666666666s" repeatCount="indefinite"/></rect><rect x="46.5" y="40" width="7" height="20" rx="5" ry="5" fill="#1b4cad" transform="rotate(270 50 50) translate(0 -30)">  <animate attributeName="opacity" from="1" to="0" dur="1s" begin="0.75s" repeatCount="indefinite"/></rect><rect x="46.5" y="40" width="7" height="20" rx="5" ry="5" fill="#1b4cad" transform="rotate(300 50 50) translate(0 -30)">  <animate attributeName="opacity" from="1" to="0" dur="1s" begin="0.8333333333333334s" repeatCount="indefinite"/></rect><rect x="46.5" y="40" width="7" height="20" rx="5" ry="5" fill="#1b4cad" transform="rotate(330 50 50) translate(0 -30)">  <animate attributeName="opacity" from="1" to="0" dur="1s" begin="0.9166666666666666s" repeatCount="indefinite"/></rect></svg>\
	</div>');
	$("#loading_circle").fadeTo(100, 1);

}
exports.loading = loading;

function stop_loading(){
	$("#loading_circle").fadeTo(100, 0, function(){
		$(this).remove();
	});
}
exports.stop_loading = stop_loading;

exports.pdf_detail = function(project){
	$("#pdf_detail").attr("class", "dialog");

	$("#pdf_detail").dialog({
		autoOpen:false,
		height:600,
		width:300,
		resizable: false,
		buttons:[
			{
				text:"Create",
				click:function(){
					var pdf = require("code/pdf.js");
					pdf.run(window, $, document);
					pdf.generate(project, button_graphics.per_page, button_graphics.print_friend, button_graphics.selection_only);
				}
			},
			{
				text:"Cancel",
				click:function(){
					$(this).dialog("close");
				}
			}
		]
	});

	$("#pdf_detail").dialog("open");
};
exports.notPLRT = function(fname){
	$("#notPLRT").attr("class", "dialog");

	$("#notPLRT").dialog({
		autoOpen: false,
		height: 250,
		width:400,
		resizable: false,
		buttons:[
			{
				text: "OK",
				click: function(){
					$(this).dialog("close");
				}
			}
		],
		open: function(){
			var split_path = fname.split(/[\/\\]/);
			$("#notPLRT span").text("\"" + split_path[split_path.length - 1] + "\" ");
		}
	});

	$("#notPLRT").dialog("open");
}

exports.save_changes = function(win){
	$("#save_changes").attr("class", "dialog");

	$("#save_changes").dialog({
		autoOpen: false,
		height: 250,
		width:400,
		resizable: false,
		buttons:[
			{
				text: "Save",
				click: function(){
					$(this).dialog("close");
					exports.close = true;
					$("#save").click();
				}
			},
			{
				text: "Don't Save",
				click: function(){
					$(this).dialog("close");
					win.close(true);
				}
			},
			{
				text: "Cancel",
				click: function(){
					$(this).dialog("close");
				}
			}
		]
	});

	$("#save_changes").dialog("open");
}

exports.player_icons = function(project, misc, draw, frame){
	$("#player_icons").attr("class", "dialog");

	$("#player_icons").dialog({
		autoOpen:false,
		height: 550,
		width: 300,
		resizable:false,
		buttons:[
			{
				text: "Close",
				click:function(){
					$("#player_icons").dialog("close");
				}
			}
		],
		open:function(){
			var player_icons = require("code/player_icons.js");

			player_icons.run(window, document, $, project, misc, draw, frame);
		}
	});

	$("#player_icons").dialog("open");
}

exports.edit_players = function(){
	//see players module
	$("#edit_players").attr("class", "dialog");

	$("#edit_players").dialog({
		autoOpen:false,
		height: 600,
		width: 400,
		resizable:false,
		buttons:[
			{
				text: "Close",
				click: function(){
					$(this).dialog("close");
				}
			}
		],
		open: function(){
			$("#edit_players ol").empty().append("<br/>");
			var list = players.list();

			for(i=0; i<list.length; i++){
				list[i].index = i;
			}
			list.sort(function(a, b){
				return a.name.l-b.name.l;
			});
			for(i=0; i<list.length; i++){
				$("#edit_players ol").append("<li data-index='" + list[i].index + "'>\
					<span>" + list[i].name.f + " " + list[i].name.l + " - #" + list[i].number + "</span>\
					<input type='checkbox' checked>\
				</li>");
			}
		}
	});

	$("#edit_players ol").on("click", "input", function(e){
		e.stopPropagation();
	});

	$("#edit_players").dialog("open");

}

exports.new_player = function(){
	//see players module
	$("#new_player_dialog").attr("class", "dialog");

	$("#new_player_dialog").dialog({
		autoOpen:false,
		height: 500,
		width: 300,
		resizable:false,
		buttons:[
			{
				text: "Ok",
				click: function(){
					var player = players.form("#new_player_dialog form");
					var duplicate = players.duplicate(player);

					if(duplicate.name === true || duplicate.number === true){
						if(duplicate.name === true && duplicate.number === true){
							duplicate.string = "A player with this name and number already exists. Would you like to proceed?";
						}
						else if(duplicate.name === true){
							duplicate.string = "A player with this name already exists. Would you like to proceed?";
						}
						else{
							duplicate.string = "A player with this number already exists. Would you like to proceed?";
						}
						exports.prompt(duplicate.string, "Duplicate", function(a){
							if(a){
								players.save(player);
								$("#edit_players").dialog("close").dialog("open");
								$("#new_player_dialog").dialog("close");
							}
							else{
								$("#new_player_dialog").dialog("close");
							}
						});
					}
					else{
						players.save(player);
						$("#edit_players").dialog("close").dialog("open");
						$(this).dialog("close");
					}
				}
			},
			{
				text: "Close",
				click:function(){
					$(this).dialog("close");
				}
			}
		],

		open: function(){
			$("#new_player_dialog input[type='text']").val("");
			$("#new_player_dialog input[type='checkbox']").attr("checked", false);
			$("#new_player_dialog input[type='number']").val("0");
		}
	});

	$("#new_player_dialog").dialog("open");
}

var player_ = null;
exports.edit_player = function(player){
	player_ = player;
	//see players module

	//ADD PLAYER ACTIONS: edit & new
	$("#edit_player").attr("class", "dialog");

	$("#edit_player").dialog({
		autoOpen:false,
		height: 500,
		width: 300,
		resizable:false,
		buttons:[
			{
				text: "Ok",
				click: function(){
					var id = player_.id;
					player_ = players.form("#edit_player form");
					player_.id = id;
					players.save(player_);
					$("#edit_players").dialog("close").dialog("open");
					$(this).dialog("close");

				}
			},
			{
				text: "Close",
				click:function(){
					$(this).dialog("close");
				}
			}
		],

		open: function(){
			$("#edit_player input[type='text']:first-child").val(player.name.f);
			$("#edit_player input[type='text']:eq(1)").val(player.name.l);

			var map = {
				PG: 1,
				SG: 2,
				SF: 3,
				PF: 4,
				C: 5
			}
			$("#edit_player input[type='checkbox']").attr("checked", false);

			for(i=0; i<player.positions.length; i++){
				//eq is base 0
				var sel = "#edit_player input[type='checkbox']:eq(" + (map[player.positions[i]] - 1) + ")";
				$(sel).attr("checked", true);
			}
			$("#edit_player input[type='number']").val(player.number);
		}
	});

	$("#edit_player").dialog("open");
}

var iList, dup;
exports.duplicate_players = function(dup_p, import_list){
	iList = import_list;
	dup = dup_p;
	//see players module
	$("#duplicate_players").attr("class", "dialog");

	$("#duplicate_players").dialog({
		autoOpen:false,
		height: 600,
		width: 400,
		resizable:false,
		buttons:[
			{
				text: "Import",
				click: function(){
					var arr = $("#duplicate_players form").serializeArray();
					var list = players.list();

					for(i=0; i<arr.length; i++){
						if(arr[i].value === "on"){
							var map = arr[i].name.split(":");
							players.save_over(list[map[i]], iList[dup[map[i]][1]]);
						}
					}

					$(this).dialog("close");
				}
			},
			{
				text: "Cancel",
				click:function(){
					$(this).dialog("close");
				}
			}
		],
		open: function(){
			$("#duplicate_players ol").empty();
			var list = players.list();
			for(i=0; i<dup.length; i++){
				var player = iList[dup[i][1]];

				var str = "";

				//ii is project index
				//i is duplicated array index
				for(ii=0; ii<dup[i][2].length; ii++){
					str += "<li>" + list[dup[i][2][ii]].name.f + " " + list[dup[i][2][ii]].name.l + " - #" + list[dup[i][2][ii]].number +
					", replace <input type='checkbox' checked name='" + ii + ":" + i + "'/></li>";
				}

				$("#duplicate_players ol").append("<li>\
					" + player.name.f + " " + player.name.l + " - #" + player.number + "\
					<br/>\
					Duplicates:\
					<ul>" + str + "\
					</ul>\
				</li>");
			}
		}
	});

	$("#duplicate_players").dialog("open");
}

var walk = function(dir, done) {
	var results2 = [];
	fs.readdir(dir, function(err, list) {
		if (err) return done(err);
		var pending = list.length;
		if (!pending) return done(null, results2);
		list.forEach(function(file) {
		file = path.resolve(dir, file);
			fs.stat(file, function(err, stat) {
				if (stat && stat.isDirectory()) {
					walk(file, function(err, res) {
						results2 = results2.concat(res);
						if (!--pending) done(null, results2);
					});
				}
				else {
					var sp = file.split(".");
					if(sp[sp.length - 1].toLowerCase() === "plrt"){
						results2.push(file);
					}
					if (!--pending) done(null, results2);
				}
			});
		});
	});
};

var results, resultsT, resultsF;
exports.search = function(project){
	$("#search").attr("class", "dialog");

	$("#search").dialog({
		autoOpen:false,
		height: 500,
		width: 450,
		resizable:false,
		buttons:[
			{
				text: "Search",
				click: function(){
					var active = $("#search_tabs").tabs("option", "active");

					//search for player
					if(active === 0){
						results = null;
						var sel = $("#search-1 select option:selected");
						var index = parseInt(sel.attr("value"));

						var player = project.players[index];

						results = players.search_local(index);

						$("#search-1 > div").remove();

						$("#search-1").append("<div>\
							<div>" + results.length + " Result(s) for " + player.name.f + " " + player.name.l + ":</div>\
							<input id='search-1_spinner' value='1' name='value'>\
						</div>");

						$("#search-1_spinner").spinner({
							spin: function(event, ui){
								var r = true;
								var v = ui.value;
								if(ui.value > results.length) {
									$(this).spinner("value", 1);
									v = 1;
									r = false;
								}
								else if(ui.value < 1){
									$(this).spinner("value", results.length);
									v = results.length;
									r = false;
								}

								$("#frame_" + results[v - 1]).mousedown();

								return r;
							}
						});
						$("#frame_" + results[0]).mousedown();
					}
					else if(active === 1){
						//search for text
						var text = $("#search-2 input").val();

						var exp = new RegExp(text, "i");

						resultsT = search.current_project(project, exp);

						$("#search-2 > div").remove();

						$("#search-2").append("<div>\
							<div>" + resultsT.length + " Result(s) for \"" + text + "\":</div>\
							<input id='search-2_spinner' value='1' name='value'>\
						</div>");

						$("#search-2_spinner").spinner({
							spin: function(event, ui){
								var r = true;
								var v = ui.value;
								if(ui.value > resultsT.length) {
									$(this).spinner("value", 1);
									v = 1;
									r = false;
								}
								else if(ui.value < 1){
									$(this).spinner("value", resultsT.length);
									v = resultsT.length;
									r = false;
								}

								$("#frame_" + resultsT[v - 1]).mousedown();

								return r;
							}
						});
						$("#frame_" + resultsT[0]).mousedown();
					}
					else{
						//search in files
						loading();

						resultsF = [];
						var text = $("#search-3_text").val();
						var dir = $("#search-3 input:first-child").val();

						if(dir.substring(dir.length - 1) !== "\\" && dir.substring(dir.length - 1) !== "/"){
							dir += "/";
						}

						if(fs.existsSync(dir) && dir !== "/"){
							var exp = new RegExp(text, "i");

							walk(dir, function(err, files){
								if(err){
									throw err;
								}

								var search_walk = function sWalk(index, cb){
									if(index +1< files.length){
										fs.readFile(files[index], function(err, data){
											if(err){
												throw err;
											}

											var p = BSON.parse(data);

											var r = search.project(p, exp);

											if(r){
												resultsF.push(files[index]);
											}

											return sWalk((index + 1), cb);
										});
									}
									else{
										return cb();
									}
								}

								search_walk(0, function(){
									$("#search-3_results").empty().append("<div>\
									" + resultsF.length + " Result(s) for \"" + text + "\":\
									</div><div></div>");

									for(i=0; i<resultsF.length; i++){
										var s = resultsF[i].split("\\");

										$("<div data-p='" + resultsF[i] + "'>\
											<img src='resources/icons/16.png'/> <span>" + s[s.length-2] + "/" + s[s.length-1] + "\
										</span></div>").appendTo("#search-3_results > div:last-child").click(function(){
											var path = $(this).attr("data-p");

											var child = child_process.spawn(process.execPath, [path], {
												detached: true,
												stdio: ['ignore']
											});

											child.unref();
										});
									}

									stop_loading();
								});
							});
						}
						else{
							exports.prompt("Please choose a different folder", "The folder does not exist!");
						}
					}
				}
			},
			{
				text: "Close",
				click:function(){
					$(this).dialog("close");
				}
			},
			{
				text: "Transparent Window",
				click: function(){
					if($("#search").parent().css("opacity") === "1"){
						$("#search").parent().fadeTo(100, 0.5);
					}
					else{
						$("#search").parent().fadeTo(100, 1);
					}
				}
			}
		],
		open: function(){
			$("#search-1 select").empty();
			var list = players.list();

			var alpha = list.sort(function(a,b){
				return a.name.l-b.name.l;
			});

			for(i=0; i<list.length; i++){
				for(ii=0; ii<alpha.length; ii++){
					if(list[i].id === alpha[ii].id){
						alpha.index = i;
						break;
					}
				}
			}

			for(i=0; i<alpha.length; i++){
				$("#search-1 select").append("<option value='" + alpha[i].index + "'>\
				" + alpha[i].name.f + " " + alpha[i].name.l + " - #" + alpha[i].number+ "\
				</option>");
			}
			$("#search-1 select").selectmenu();
		}
	});

	$("#search_tabs").tabs();

	$("#search-2 input:first-child, #search-3_text").keydown(function(e){
		if(e.which === 13){
			$("#search").dialog("option", "buttons")[0].click();
			this.select();
		}
	});

	$("#search-3_file_input").on("change", function(e){
		$("#search-3_file_display").val($(this).val());
	});

	$("#search-3_file").click(function(){
		$("#search-3_file_input").click();
	});

	$("#search").dialog("open");
}


exports.gif = function(project){
	function invalid(){
		$("#gif_invalid").show();
	}

	$("#gif_invalid").hide();
	$("#gif_dialog").attr("class", "dialog");
	$("#gif_dialog").dialog({
		autoOpen: false,
		width: 450,
		height: 500,
		resizable: false,
		buttons: [
			{
				text: "Create",
				click: function(){
					var numregX = /^\d+$/;

					var range = [parseInt($("#gif_range input:first-child").val()), parseInt($("#gif_range input:last").val())];

					if(numregX.test(range[0]) && numregX.test(range[1])){
						range.sort();
						if(range[0] < 1){
							range[0] = 1;
						}
						if(range[1] > project.frames.length){
							range[1] = project.frames.length;
						}
						range[0]--;
						range[1]--;
						gif.create(range);
					}
					else {
						invalid();
					}
					$(this).dialog("close");
				}
			},
			{
				text: "Cancel",
				click: function(){
					$(this).dialog("close");
				}
			}
		]
	});

	$("#gif_range input").spinner({
		min: 1,
		max: project.frames.length
	});

	$("#gif_dialog").dialog("open");
}

exports.print = function(project, BSON){
	$("#print_detail").attr("class", "dialog");

	$("#print_detail").dialog({
		autoOpen:false,
		height: 600,
		width: 300,
		resizable: false,
		buttons:[
			{
				text: "Print",
				click: function(){
					$(this).dialog("close");

					project.print = {
						per_page: button_graphics.per_page_print,
						print_friend: button_graphics.print_friend_print,
						selection_only: button_graphics.selection_only_print
					};

					if(project.print.selection_only === true){
						$(".frame_selected").each(function(){
							var index = index = parseInt($(this).attr("id").substring(6), 10);

							project.frames[index].sel = true;
						});
					}

					var buf = BSON.serialize(project);
					fs.writeFileSync("temp/~printProject.bson", buf);

					delete project.print;

					for(i=0; i<project.frames.length; i++){
						delete project.frames[i].sel;
					}

					window.open("resources/print.html");
				}
			},
			{
				text: "Cancel",
				click: function(){
					$(this).dialog("close");
				}
			}
		]
	});

	$("#print_detail").dialog("open");
}

var settings_init = false;
exports.settings = function(){
	$("#settings").attr("class", "dialog");

	if(settings_init === false){
		settings_init = true;
		if(settings.app.drawing.straight === 1){
			$("#settings_drawing_straight_curved .button:first-child").addClass("setting_select");
		}
		else{
			$("#settings_drawing_straight_curved .button:last-child").addClass("setting_select");
		}

		if(settings.app.player_name_display === "l"){
			$("#settings_player_name_display .button:first-child").addClass("setting_select");
		}
		else{
			$("#settings_player_name_display .button:last-child").addClass("setting_select");
		}
	}

	$("#settings").dialog({
		autoOpen:false,
		height: 500,
		width: 500,
		resizable: false,
		buttons:[
			{
				text: "Ok",
				click: function(){
					try{
						var set;
						if($("#settings_drawing_straight_curved .button:first-child").hasClass("setting_select")){
							set = {
								drawing: {
									straight: 1,
									curve: 3
								}
							}
						}
						else{
							set = {
								drawing: {
									straight: 3,
									curve: 1
								}
							}
						}

						if($("#settings_player_name_display .button:first-child").hasClass("setting_select")){
							set.player_name_display = "l";
						}
						else{
							set.player_name_display = "f";
						}

						settings.set(set);
					}
					catch(err){}
					$(this).dialog("close");

					draw.refresh();
				}
			},
			{
				text: "Cancel",
				click: function(){
					$(this).dialog("close");
				}
			}
		]
	});

	$("#settings").dialog("open");
}
