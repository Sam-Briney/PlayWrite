var calc = require("code/calc.js"),
	construct = require("code/construct.js"),
	settings = require("code/settings.js"),
	button_graphics = require("code/button_graphics.js"),
	players = require("code/players.js");

var $, window, document, images, project, frame_gl;
exports.run = function(JQ, win, doc, pro, fr){
	$ = JQ;
	window = win;
	document = doc;
	project = pro;
	frame_gl = fr;

	images = {};

	var list = ["classic", "triangle"];

	for(i=0; i<list.length; i++){
		images[list[i]] = {
			o: $("#player_icons_data img[data-player='" + list[i] + "']"),
			x: $("#player_icons_data img[data-player='" + list[i] + "']").next(),
			ball: $("#player_icons_data img[data-player='" + list[i] + "']").next().next(),
			o1: $("#player_icons_data img[data-player='" + list[i] + "'][data-numbered='o']"),
			o2: $("#player_icons_data img[data-player='" + list[i] + "'][data-numbered='o']").next(),
			o3: $("#player_icons_data img[data-player='" + list[i] + "'][data-numbered='o']").next().next(),
			o4: $("#player_icons_data img[data-player='" + list[i] + "'][data-numbered='o']").next().next().next(),
			o5: $("#player_icons_data img[data-player='" + list[i] + "'][data-numbered='o']").next().next().next().next(),
			x1: $("#player_icons_data img[data-player='" + list[i] + "'][data-numbered='x']"),
			x2: $("#player_icons_data img[data-player='" + list[i] + "'][data-numbered='x']").next(),
			x3: $("#player_icons_data img[data-player='" + list[i] + "'][data-numbered='x']").next().next(),
			x4: $("#player_icons_data img[data-player='" + list[i] + "'][data-numbered='x']").next().next().next(),
			x5: $("#player_icons_data img[data-player='" + list[i] + "'][data-numbered='x']").next().next().next().next(),
			ball1: $("#player_icons_data img[data-player='" + list[i] + "'][data-numbered='ball']"),
			ball2: $("#player_icons_data img[data-player='" + list[i] + "'][data-numbered='ball']").next(),
			ball3: $("#player_icons_data img[data-player='" + list[i] + "'][data-numbered='ball']").next().next(),
			ball4: $("#player_icons_data img[data-player='" + list[i] + "'][data-numbered='ball']").next().next().next(),
			ball5: $("#player_icons_data img[data-player='" + list[i] + "'][data-numbered='ball']").next().next().next().next()
		}
	}

};


var line = function(ctx, xA, yA, xB, yB, dash){
	var dashArg;
	if(dash === "dash"){
		dashArg = [5, 5];
	}
	else{
		dashArg = [1, 0];
	}
	ctx.beginPath();
		ctx.setLineDash(dashArg);
		ctx.moveTo(xA, yA);
		ctx.lineTo(xB, yB);
		ctx.stroke();
	ctx.closePath();
};

exports.line = line;

function wrapText(context, text, x, y, maxWidth, lineHeight, maxHeight) {
	text = text.replace(/\n/g, ' |br| ');
	var words = text.split(' ');
	var line = '';

	var lines = [];

	for(var n = 0; n < words.length; n++) {

		if(context.measureText(words[n]).width > maxWidth){
			var temp_line = words[n].substring(0, 1);
			var index = 1;
			while(context.measureText(temp_line).width < maxWidth){
				index++;
				temp_line = words[n].substring(0, index);
			}
			index--;
			temp_line = temp_line.substring(0, index);
			temp_line2 = words[n].substring(index);

			words[n] = temp_line;
			words.splice(n+1, 0, "|br|", temp_line2);
		}
	}
	for(n=0; n<words.length; n++){
		if(words[n] !== "|br|"){
			if(context.measureText(line + words[n]).width < maxWidth){
				line += words[n] + " ";
			}
			else{
				lines.push(line.substring(0, line.length - 1));
				line = words[n] + " ";
			}
		}
		else{
			lines.push(line.substring(0, line.length - 1));
			line = "";
		}
	}
	lines.push(line.substring(0, line.length - 1));

	for(n=0; n<lines.length; n++){
		context.fillText(lines[n], x, y);
		y += lineHeight;
		if(y >= maxHeight){
			//break;
		}
	}
}

var court = function(ctx, full_court, outside_lines, print_friend){
	var metrics = {
		x: 0,
		y: 0,
		width: 500,
		height: 420,
		sc: 0.85
	}

	//fullcourt
	if(full_court){

		ctx.canvas.height = 840;
		metrics.height = 840;

		//background
		ctx.fillStyle = "white";
		ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);

		if(outside_lines){
			metrics.x = 37.5;
			metrics.y = 63;
			metrics.width = 500 * metrics.sc;
			metrics.height = 840 * metrics.sc;
		}

		var fc;
		if(print_friend){
			fc = document.getElementById("full_court_printIMG");
		}
		else{
			fc = document.getElementById("full_court_vertIMG");
		}
		ctx.drawImage(fc, metrics.x, metrics.y, metrics.width, metrics.height);


		if(outside_lines){
			ctx.restore();
		}

	}
	else{
		ctx.canvas.height = 420;
		metrics.height = 420;

		//background
		ctx.fillStyle = "white";
		ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);

		if(outside_lines){
			metrics.x = 37.5;
			metrics.y = 25.5;
			metrics.width = 500 * metrics.sc;
			metrics.height = 420 * metrics.sc;
		}
		var hc;

		if(print_friend){
			hc = document.getElementById("half_court_printIMG");
		}
		else{
			hc = document.getElementById("half_courtIMG");
		}
		ctx.drawImage(hc, metrics.x, metrics.y, metrics.width, metrics.height);

		if(outside_lines){
			ctx.restore();
		}

	}

	$("#canvas_contain > div").first().height(ctx.canvas.height);
};

exports.court = court;

var clear_canvas = function(ctx){
	w = ctx.canvas.width;
	h = ctx.canvas.height;
	ctx.clearRect(0, 0, w, h);
};


exports.clear_canvas = clear_canvas;
function drawDot(ctx, xa, ya, dotRadius, dotColor) {
	ctx.beginPath();
	ctx.arc(xa, ya, dotRadius, 0, 2 * Math.PI, false);
	ctx.fillStyle = dotColor;
	ctx.fill();
}

function text(ctx, t, x, y, align){
	if(!align){
		align = "center";
	}

	ctx.textBaseline = "top";
	ctx.textAlign = align;
	ctx.fillStyle = "#000";
	ctx.font="15px 'Times New Roman'";

	ctx.fillText(t, x, y);
}

var lineSquiggle = function(ctx, x1, y1, x2, y2, single){

	var points = calc.waypoints({x: x1, y: y1}, {x: x2, y: y2}, 3, single);

	points = calc.bezier(points);

	if(single){
		points.push({
			x: x2,
			y: y2
		});
		points[0] = {
			x: x1,
			y: y1
		}
	}

	for(index=0; index<points.length-3; index+=3){
		ctx.beginPath();
			ctx.lineWidth = 1.3;
			ctx.moveTo(points[index].x, points[index].y);
			ctx.bezierCurveTo(points[index+1].x, points[index+1].y, points[index+2].x, points[index+2].y, points[index+3].x, points[index+3].y);
			ctx.stroke();
		ctx.closePath();
		//console.log(points[index].x, points[index].y, points[index+3].x, points[index+3].y);
	}

}

exports.lineSquiggle = lineSquiggle;

var defined_lineSquiggle = function(ctx, points){
	for(index=0; index<points.length-3; index+=3){
		ctx.beginPath();
			ctx.lineWidth = 1.3;
			ctx.moveTo(points[index].x, points[index].y);
			ctx.bezierCurveTo(points[index+1].x, points[index+1].y, points[index+2].x, points[index+2].y, points[index+3].x, points[index+3].y);
			ctx.stroke();
		ctx.closePath();
		//console.log(points[index].x, points[index].y, points[index+3].x, points[index+3].y);
	}
}

var single_line = function(ctx, line_data, offset){

	ctx.lineWidth = 1.3;
	if(line_data.type === "arrow" || line_data.type === "screen"){
		line(ctx,line_data.a.x-offset.x, line_data.a.y-offset.y, line_data.b.x-offset.x, line_data.b.y-offset.y);
		line(ctx,line_data.b.x-offset.x, line_data.b.y-offset.y, line_data.head.pa.x-offset.x, line_data.head.pa.y-offset.y);
		line(ctx,line_data.b.x-offset.x, line_data.b.y-offset.y, line_data.head.pb.x-offset.x, line_data.head.pb.y-offset.y);
	}
	else if(line_data.type === "pass"){

		line(ctx,line_data.a.x-offset.x, line_data.a.y-offset.y, line_data.b.x-offset.x, line_data.b.y-offset.y, "dash");
		line(ctx,line_data.b.x-offset.x, line_data.b.y-offset.y, line_data.head.pa.x-offset.x, line_data.head.pa.y-offset.y);
		line(ctx,line_data.b.x-offset.x, line_data.b.y-offset.y, line_data.head.pb.x-offset.x, line_data.head.pb.y-offset.y);
	}
	else if(line_data.type === "arrow~" || line_data.type === "screen~"){

		for(ii=1; ii<line_data.curve.length; ii++){
			line(ctx,line_data.curve[ii - 1].x-offset.x, line_data.curve[ii - 1].y-offset.y, line_data.curve[ii].x-offset.x, line_data.curve[ii].y-offset.y);
		}
		line(ctx,line_data.curve[line_data.curve.length - 1].x-offset.x, line_data.curve[line_data.curve.length - 1].y-offset.y, line_data.head.pa.x-offset.x, line_data.head.pa.y-offset.y);
		line(ctx,line_data.curve[line_data.curve.length - 1].x-offset.x, line_data.curve[line_data.curve.length - 1].y-offset.y, line_data.head.pb.x-offset.x, line_data.head.pb.y-offset.y);
	}
	else if(line_data.type === "dribble" || line_data.type === "dribble~"){
		var temp_points = [];
		for(ii=0; ii<line_data.points.length; ii++){
			temp_points[ii] = {
				x: line_data.points[ii].x - offset.x,
				y: line_data.points[ii].y - offset.y
			}
		}

		defined_lineSquiggle(ctx, temp_points);
		line(ctx,line_data.b.x-offset.x, line_data.b.y-offset.y, line_data.head.pa.x-offset.x, line_data.head.pa.y-offset.y);
		line(ctx,line_data.b.x-offset.x, line_data.b.y-offset.y, line_data.head.pb.x-offset.x, line_data.head.pb.y-offset.y);

		if(line_data.player >= 0){
			text(ctx, project.players[arr[i].player].name[settings.app.player_name_display], arr[i].a.x + 12.5, arr[i].a.y + 25);
		}
	}
}

var startpos = {};
var handle_startposA = {};
var selected_draw = [];
var selected_handle = [];
var log = function(ctx, doc, frame, print_friend, include_text_boxes){

	var arr = frame.line_arr;
	clear_canvas(ctx);
	court(ctx, frame.full_court, frame.outside_lines, print_friend);

	if(include_text_boxes !== true){
		$("#drawing_contain, #handle_contain, #edit_line_contain").empty();
	}

	if(arr.length >= 1){

		if(!frame.player_icons){
			frame.player_icons = "classic";
		}

		for(i=0; i<arr.length; i++){
			ctx.lineWidth = 1.3;
			if(arr[i].type === "arrow" || arr[i].type === "screen"){
				line(ctx,arr[i].a.x, arr[i].a.y, arr[i].b.x, arr[i].b.y);
				line(ctx,arr[i].b.x, arr[i].b.y, arr[i].head.pa.x, arr[i].head.pa.y);
				line(ctx,arr[i].b.x, arr[i].b.y, arr[i].head.pb.x, arr[i].head.pb.y);
			}
			else if(arr[i].type === "pass"){
				line(ctx,arr[i].a.x, arr[i].a.y, arr[i].b.x, arr[i].b.y, "dash");
				line(ctx,arr[i].b.x, arr[i].b.y, arr[i].head.pa.x, arr[i].head.pa.y);
				line(ctx,arr[i].b.x, arr[i].b.y, arr[i].head.pb.x, arr[i].head.pb.y);
			}
			else if(arr[i].type === "ball" || arr[i].type === "o" || arr[i].type === "x" || /[ball|o|x][1-5]/.test(arr[i].type)){
				var img = images[frame.player_icons][arr[i].type];

				if(include_text_boxes === true){
					ctx.drawImage(img[0], arr[i].a.x, arr[i].a.y);
				}
				else{
					$("<div class='drawing' data-index='" + i + "'>"+
						"<img src='" + img.attr("src") + "'/>"+
					"</div>").appendTo("#drawing_contain").css({
						position: "absolute",
						zIndex: 35,
						left: arr[i].a.x,
						top: arr[i].a.y
					});
				}

				if(arr[i].player >= 0){
					text(ctx, project.players[arr[i].player].name[settings.app.player_name_display], arr[i].a.x + 12.5, arr[i].a.y + 25);
				}
			}
			else if(arr[i].type === "arrow~" || arr[i].type === "screen~"){
				for(ii=1; ii<arr[i].curve.length; ii++){
					line(ctx,arr[i].curve[ii - 1].x, arr[i].curve[ii - 1].y, arr[i].curve[ii].x, arr[i].curve[ii].y);
				}
				line(ctx,arr[i].curve[arr[i].curve.length - 1].x, arr[i].curve[arr[i].curve.length - 1].y, arr[i].head.pa.x, arr[i].head.pa.y);
				line(ctx,arr[i].curve[arr[i].curve.length - 1].x, arr[i].curve[arr[i].curve.length - 1].y, arr[i].head.pb.x, arr[i].head.pb.y);
			}
			else if(arr[i].type === "dribble" || arr[i].type === "dribble~"){
				defined_lineSquiggle(ctx, arr[i].points);
				line(ctx,arr[i].b.x, arr[i].b.y, arr[i].head.pa.x, arr[i].head.pa.y);
				line(ctx,arr[i].b.x, arr[i].b.y, arr[i].head.pb.x, arr[i].head.pb.y);
			}


			if(arr[i].type === "arrow" || arr[i].type === "screen" || arr[i].type === "pass" || arr[i].type === "dribble"){
				if(include_text_boxes !== true){

					$("<div class='handle' data-index='" + i + "'></div>"+
					"<div class='handle_display'></div>").appendTo("#handle_contain");
					$(".handle[data-index='" + i + "']").css({
						position: "absolute",
						zIndex: 25,
						left: Math.min(arr[i].a.x, arr[i].b.x) - 14,
						top: Math.min(arr[i].a.y, arr[i].b.y) - 14,
						width:Math.max(arr[i].a.x, arr[i].b.x) - Math.min(arr[i].a.x, arr[i].b.x),
						height:Math.max(arr[i].a.y, arr[i].b.y) - Math.min(arr[i].a.y, arr[i].b.y)
					}).next(".handle_display").css({
						position: "absolute",
						left: arr[i].handle.x,
						top: arr[i].handle.y,
						zIndex: 30
					});
				}
			}

			if((arr[i].type === "dribble~" || arr[i].type === "arrow~" || arr[i].type === "screen~") && include_text_boxes !== true){

				var VAR = "curve";
				if(arr[i].type === "dribble~"){
					VAR = "points";
				}

				var pX = [];
				for(ii=0; ii<arr[i][VAR].length; ii++){
					pX.push(arr[i][VAR][ii].x);
				}
				var pY = [];
				for(ii=0; ii<arr[i][VAR].length; ii++){
					pY.push(arr[i][VAR][ii].y);
				}

				$("<div class='handle' data-index='" + i + "'></div>"+
				"<div class='handle_display'></div>").appendTo("#handle_contain");
				$(".handle[data-index='" + i + "']").css({
					position: "absolute",
					zIndex: 25,
					left: Math.min.apply(this, pX) - 10,
					top: Math.min.apply(this, pY) - 10,
					width:Math.max.apply(this, pX) - Math.min.apply(this, pX),
					height:Math.max.apply(this, pY) - Math.min.apply(this, pY)
				}).next(".handle_display").css({
					position: "absolute",
					left: arr[i].handle.x,
					top: arr[i].handle.y,
					zIndex: 30
				});
			}
		}

		//drawing = player
		var ctx2,
			player,
			index,
			coord = {
				x: 0,
				Y: 0
			};
		if(include_text_boxes !== true){
			$(".drawing").draggable({
				containment: "#canvas",
				start: function(e, ui){
					index = $(this).attr("data-index");
					index = parseInt(index, 10);

					startpos.x = project.frames[frame_gl.index].line_arr[index].a.x;
					startpos.y = project.frames[frame_gl.index].line_arr[index].a.y;

					ctx.drawImage(images[project.frames[frame_gl.index].player_icons][project.frames[frame_gl.index].line_arr[index].type][0], ui.position.left, ui.position.top);

					$("<canvas id='temp_canvas' width='500' height='420'></canvas>").appendTo("#canvas_overlay").css({
						position: "absolute",
						zIndex: 26,
						marginLeft: -500
					});

					ctx2 = document.getElementById("temp_canvas").getContext("2d");
				},
				drag: function(e, ui){
					clear_canvas(ctx2);
					if(project.frames[frame_gl.index].line_arr[index].player > -1){
						player = project.players[project.frames[frame_gl.index].line_arr[index].player];
						text(ctx2, (player.name[settings.app.player_name_display]), ui.position.left + 12.5, ui.position.top + 25);
					}
				},
				stop: function(e, ui){
					$("#temp_canvas").remove();
					var index = $(this).attr("data-index");
					index = parseInt(index, 10);

					project.frames[frame_gl.index].line_arr[index].a = {
						x: ui.position.left,
						y: ui.position.top
					}

					global.actions.push(new construct.action({
						type: "move_drawing/handle",
						frame_index: frame_gl.index,
						index: index,
						old: {
							x: startpos.x,
							y: startpos.y
						}
					}));

					var pdf_ctx = document.getElementById("pdf_canvas").getContext("2d");
					current_frame(frame_gl.index, pdf_ctx, frame, doc);

					log(ctx, doc, frame);
					$(".drawing [data-index='" + index + "']").click();

					$("#a_done_false").click();
				}
			}).on("mousedown", function(e){
				//global.draw = false;
			}).on("contextmenu", function(e){
				players.menu(e, this);

				global.draw = false;
				$(window).one("click", function(){
					global.draw = true;
				});
			}).on("touchstart", function(e){
				coord.x = e.originalEvent.touches[0].pageX;
				coord.y = e.originalEvent.touches[0].pageY;
			}).on("taphold", function(e){
				e.pageX = coord.x;
				e.pageY = coord.y;

				players.menu(e, this);

				global.draw = false;
				$(window).one("click", function(){
					global.draw = true;
				});
			}).on("touchend", function(e){
				//e.stopPropagation();
				//return false;
			}).on("mouseup", function(e){
				//global.draw = false;
			});

			//handle = lines
			$(".handle_display").draggable({
				containment: "#canvas",
				start: function(e, ui){
					startpos.x = ui.position.left;
					startpos.y = ui.position.top;

					var index = $(this).prev('.handle').attr("data-index");
					index = parseInt(index, 10);

					handle_startposA.x = project.frames[frame_gl.index].line_arr[index].a.x;
					handle_startposA.y = project.frames[frame_gl.index].line_arr[index].a.y;

					var dif = {
						x: $(this).offset().left - $(this).prev(".handle").offset().left,
						y: $(this).offset().top - $(this).prev(".handle").offset().top
					}

					$("<canvas width='" + ($(this).prev(".handle").width() + 28) + "' height='" + ($(this).prev(".handle").height() + 28) + "'></canvas>").appendTo(this).css({
						position: "absolute",
						backgroundColor: "rgba(0, 0, 0, 0)",
						left: (dif.x * -1),
						top: (dif.y * -1)
					});

					var ctx_small = $(this).children("canvas")[0].getContext("2d");

					var ld = {};

					$.extend(ld, project.frames[frame_gl.index].line_arr[index]);

					single_line(ctx_small, ld, {
						x: $(this).children("canvas").offset().left - $("#canvas").offset().left,
						y: $(this).children("canvas").offset().top - $("#canvas").offset().top
					});
					selected_draw = [];
					selected_handle = [];

					$(".drawing_select").each(function(){
						selected_draw.push($(this).attr("data-index"));
					});
					$(".handle_select").each(function(){
						selected_handle.push($(this).prev(".handle").attr("data-index"));
					});
				},
				stop: function(e, ui){
					var index = $(this).prev('.handle').attr("data-index");
					index = parseInt(index, 10);
					var type = project.frames[frame_gl.index].line_arr[index].type;
					var dif = {
						x: startpos.x - ui.position.left,
						y: startpos.y - ui.position.top
					}

					global.actions.push(new construct.action({
						type: "move_drawing/handle",
						frame_index: frame_gl.index,
						index: index,
						old: {
							x: handle_startposA.x,
							y: handle_startposA.y
						}
					}));

					$(this).prev(".handle").css({
						left: $(this).prev(".handle").position().left + dif,
						top: $(this).prev(".handle").position().top + dif
					});

					project.frames[frame_gl.index].line_arr[index].a = {
						x: project.frames[frame_gl.index].line_arr[index].a.x - dif.x,
						y: project.frames[frame_gl.index].line_arr[index].a.y - dif.y
					}

					if(type !== "arrow~" && type !== "screen~"){
						project.frames[frame_gl.index].line_arr[index].b = {
							x: project.frames[frame_gl.index].line_arr[index].b.x - dif.x,
							y: project.frames[frame_gl.index].line_arr[index].b.y - dif.y
						}
					}
					project.frames[frame_gl.index].line_arr[index].head = {
						pa:{
							x: project.frames[frame_gl.index].line_arr[index].head.pa.x - dif.x,
							y: project.frames[frame_gl.index].line_arr[index].head.pa.y - dif.y
						},
						pb:{
							x: project.frames[frame_gl.index].line_arr[index].head.pb.x - dif.x,
							y: project.frames[frame_gl.index].line_arr[index].head.pb.y - dif.y
						}
					}
					project.frames[frame_gl.index].line_arr[index].handle = {
						x: project.frames[frame_gl.index].line_arr[index].handle.x - dif.x,
						y: project.frames[frame_gl.index].line_arr[index].handle.y - dif.y
					}
					if(type === "dribble" || type === "dribble~" || type === "arrow~" || type === "screen~"){
						var VAR = "curve";
						if(type === "dribble" || type === "dribble~"){
							VAR = "points";
						}

						for(i=0; i<project.frames[frame_gl.index].line_arr[index][VAR].length; i++){
							project.frames[frame_gl.index].line_arr[index][VAR][i] = {
								x: project.frames[frame_gl.index].line_arr[index][VAR][i].x - dif.x,
								y: project.frames[frame_gl.index].line_arr[index][VAR][i].y - dif.y
							}
						}
					}

					var pdf_ctx = document.getElementById("pdf_canvas").getContext("2d");
					current_frame(frame_gl.index, pdf_ctx, frame, doc);

					log(ctx, doc, frame);

					for(ii=0; ii<selected_draw.length; ii++){
						$(".drawing[data-index='" + selected_draw[ii] + "']").addClass("drawing_select");
					}
					for(ii=0; ii<selected_handle.length; ii++){
						$(".handle[data-index='" + selected_handle[ii] + "']").next(".handle_display").addClass("handle_select handle_show");
					}

					//reset temp_line
					$("#a_done_false").click();
				}
			});

			//edit lines
			function edit_lines_cb(){
				var line_index = parseInt($(this).prev().attr("data-index"));

				if(frame.line_arr[line_index].type === "arrow" || frame.line_arr[line_index].type === "screen" || frame.line_arr[line_index].type === "pass" || frame.line_arr[line_index].type === "dribble"){
					var offset = 7;
					//a
					$("<div class='edit_line' data-point='a' data-index='" + line_index + "'></div>").appendTo("#edit_line_contain").css({
						left: frame.line_arr[line_index].a.x - offset,
						top: frame.line_arr[line_index].a.y - offset
					});
					//b
					$("<div class='edit_line' data-point='b' data-index='" + line_index + "'></div>").appendTo("#edit_line_contain").css({
						left: frame.line_arr[line_index].b.x - offset,
						top: frame.line_arr[line_index].b.y - offset
					});

					$("#edit_line_contain div").mousedown(function(){
						global.draw = false;
					});
					var ctx2,
					line_index,
					edit,
					cOffset;
					$("#edit_line_contain div").draggable({
						containment: "#canvas",
						start: function(e, ui){
							line_index = parseInt($(this).attr("data-index"));
							edit = $(this).attr("data-point");

							$("<canvas id='temp_canvas' width='500' height='" + $("#canvas").height() + "'></canvas>").appendTo("#canvas_overlay").css({
								position: "absolute",
								zIndex: 26,
								marginLeft: -500
							});
							ctx2 = document.getElementById("temp_canvas").getContext("2d");
							cOffset = {
								top: $("#canvas").offset().top,
								left: $("#canvas").offset().left
							}

						},
						drag: function(e, ui){
							$("#temp_canvas").offset({
								top: cOffset.top,
								left: cOffset.left
							});
							clear_canvas(ctx2);
							single_line(ctx2, calc.reprocess(frame.line_arr[line_index], edit, {
								x: ui.position.left + offset,
								y: ui.position.top + offset
							}), {
								x: 0,
								y: 0
							});
						},
						stop: function(e, ui){
							$("#temp_canvas").remove();

							var line_index = parseInt($(this).attr("data-index"));
							var point = $(this).attr("data-point");

							//undo support
							global.actions.push(new construct.action({
								type: "edit_line",
								frame_index: $(".frame_selected").index(),
								line_index: line_index,
								changed_point: point,
								point: {
									x: frame.line_arr[line_index][point].x,
									y: frame.line_arr[line_index][point].y
								}
							}));

							frame.line_arr[line_index] = calc.reprocess(frame.line_arr[line_index], point, {
								x: ui.position.left + offset,
								y: ui.position.top + offset
							});

							//reset temp_line
							$("#a_done_false").click();

							//re draw
							$("#edit_line_contain").empty();
							global.draw = true;
							log(ctx, doc, frame, print_friend, include_text_boxes);
							$(".handle[data-index='" + line_index + "']").mouseenter();
							$(".handle[data-index='" + line_index + "']").next(".handle_display").addClass("handle_select handle_display").click();

						}
					});
				}
			}

			$(".handle_display").on("click", edit_lines_cb);
			$(".handle_display").on("touchstart", edit_lines_cb);
		}
	}

	if(include_text_boxes === true){

		var text_boxes = frame.text_boxes;

		for(i=0; i<text_boxes.length; i++){

			ctx.fillStyle="rgba(255, 255, 255, 0.7)";
			ctx.strokeStyle = "rgba(27, 76, 173, 0.7)";
			ctx.lineWidth = 1;

			ctx.fillRect(text_boxes[i].position.x+3, text_boxes[i].position.y+3, text_boxes[i].size.width, text_boxes[i].size.height);
			ctx.rect(text_boxes[i].position.x+3, text_boxes[i].position.y+3, text_boxes[i].size.width, text_boxes[i].size.height);
			ctx.stroke();

			ctx.textBaseline = "top";
			ctx.textAlign = "left";
			ctx.fillStyle = "#000";
			ctx.font="20px 'Times New Roman'";
			wrapText(ctx, text_boxes[i].text, text_boxes[i].position.x+6, text_boxes[i].position.y+6, text_boxes[i].size.width-3, 23, text_boxes[i].size.height);

		}
	}
};

exports.log = log;

var current_frame = function(index, ctx, frame, doc){

	log(ctx, doc, frame, false, true);
	var img = ctx.canvas.toDataURL("image/png");

	$("#frame_" + index + " img").attr("src", img);
}

exports.current_frame = current_frame;

exports.refresh = function(){
	log(document.getElementById("canvas").getContext("2d"), document, project.frames[frame_gl.index]);
}
